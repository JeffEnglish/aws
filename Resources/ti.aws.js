/*
* Amazon WebServices Module
* A framework for exposing the Amazon QueryAPIs to Appcelerator Titanium Mobile.
*
* This framework is designed for QueryAPIs provided by AWS. Each service is represented
* as a NameSpace, within which each operation is exposed.
*
* This framework requires you to refer to the AWS API reference for handling request, and
* responses recieved from the service.
*   i.e. refer to : http://aws.amazon.com/documentation/
*
* To learn more about this framework, or get the latest version, check out:
*  https://github.com/appcelerator-se/aws
*
*/
//Session variables used across all methods

var _sessionOBJ = {
	utility : require('/module/utils'), //Common to all namespaces
	bedFrame : require('/module/bedframe'), //Common to all namespaces
	x2j : require('/module/xml2json'), //Common to all namespaces
	utf8 : require('/module/utf8').load(), //Used for s3
	sha : require('/module/hmacsha1').load(),
	md5 : require('/module/md5'),
	accessKeyId : null, //To be initalized via the authorize method
	secretKey : null	//To be initalized via the authorize method
};

Ti.include("/module/awssigner.js");

function generateSessionTokenPayload(actionName, params, accessKeyId, secretKey, endpoint, version) {
	var host = endpoint.replace(/.*:\/\//, "");
	var payload = null;
	params.Action = actionName;
	params.Version = version;
	var signer = new AWSV2Signer(accessKeyId, secretKey);
	params = signer.sign(params, new Date(), {
		"verb" : "POST",
		"host" : host,
		"uriPath" : "/"
	});

	var encodedParams = [];
	for(var key in params) {
		if(params[key] !== null) {
			encodedParams.push(encodeURIComponent(key) + "=" + encodeURIComponent(params[key]));
		} else {
			encodedParams.push(encodeURIComponent(key));
		}
	}
	payload = encodedParams.join("&");
	return payload;
}

//Generates session token, temperary access key and temperary secret key, to be used with calls to dynamodb api's
function sessionTokenExecutor(params, cbOnData, cbOnError) {
	if(this.preparer && !this.prepared) {
		this.preparer();
		this.prepared = true;
	}
	//this.endpoint="dynamodb.us-east-1.amazonaws.com";
	var xhr = Ti.Network.createHTTPClient();
	sUrl = generateSessionTokenPayload(this.action, params, _sessionOBJ.accessKeyId, _sessionOBJ.secretKey, this.endpoint, this.version)
	xhr.open(this.verb, this.endpoint);
	xhr.setRequestHeader('Host', 'sts.amazonaws.com');

	xhr.onload = function(response) {
		jsResp = _sessionOBJ.x2j.parser(this.responseText);
		Ti.App.Properties.setString('sessionToken', jsResp.getsessiontokenresponse.getsessiontokenresult.credentials.sessiontoken);
		Ti.App.Properties.setString('secretAccessKey', jsResp.getsessiontokenresponse.getsessiontokenresult.credentials.secretaccesskey);
		Ti.App.Properties.setString('tempAccessKeyId', jsResp.getsessiontokenresponse.getsessiontokenresult.credentials.accesskeyid);
		Ti.App.Properties.setString('expirationTime', jsResp.getsessiontokenresponse.getsessiontokenresult.credentials.expiration);
		Titanium.API.info('Success' + this.responseText);
	};

	xhr.onerror = function(e) {
	}
	xhr.send(sUrl);
}

function dynamoDbExecutor(params, cbOnData, cbOnError) {

	if(this.preparer && !this.prepared) {
		this.preparer();
		this.prepared = true;
	}
	var curDate = (new Date()).toUTCString();
	this.verb = "POST";
	this.endpoint = 'http://dynamodb.us-east-1.amazonaws.com/';

	// temperary access key
	var tempAccessKeyId = Ti.App.Properties.getString('tempAccessKeyId');
	// session token generated by sts
	var sessionToken = Ti.App.Properties.getString('sessionToken');
	// temperary secret key
	var secretAccessKey = Ti.App.Properties.getString('secretAccessKey');

	var host = 'dynamodb.us-east-1.amazonaws.com';
	var rqBody = {};
	var dtStr = (new Date).toUTCString();
	var sts = ('POST' + '\n' + '/' + '\n' + '' + '\n' + ('host' + ':' + host + '\n' + 'x-amz-date' + ':' + dtStr + '\n' + 'x-amz-security-token' + ':' + sessionToken + '\n' + 'x-amz-target' + ':' + 'DynamoDB_20111205.ListTables' + '\n') + '\n' + rqBody);

	var sign = _sessionOBJ.sha.b64_sha1(sts);
	//var signature = _sessionOBJ.sha.b64_sha1(secretAccessKey, sign);
	var signature = _sessionOBJ.sha.b64_hmac_sha1(sign, secretAccessKey);
	//var signature = _sessionOBJ.md5.b64_hmac_md5(sign, secretAccessKey);
	
	
	var xhr = Ti.Network.createHTTPClient();
	xhr.open(this.verb, this.endpoint);
	var auth = ('AWS3 AWSAccessKeyId=' + tempAccessKeyId + ',Algorithm=HmacSHA1,SignedHeaders=host;x-amz-date;x-amz-target;x-amz-security-token,Signature=' + signature);

	xhr.setRequestHeader('content-type', 'application/x-amz-json-1.0');
	xhr.setRequestHeader('Date', dtStr);
	xhr.setRequestHeader('Host', host);
	xhr.setRequestHeader('X-Amzn-Authorization', auth);
	xhr.setRequestHeader('X-Amz-Date', curDate);
	xhr.setRequestHeader('x-amz-security-token', sessionToken);
	xhr.setRequestHeader('X-amz-target', 'DynamoDB_20111205.ListTables');

	//xhr.setRequestHeader('content-length', '5');

	xhr.onload = function(response) {
		alert('1');
	};
	xhr.onerror = function(e) {
		alert('2');
		Ti.API.info('error is ' + this.responseText);
	}
	xhr.send();
}

var AWS = {};

/**
 * Stores the security credentials in the Module Session scope
 *
 * @param accessKeyId - AccessKey provided by the user
 * @param secretKey - SecretKey provided by the user
 */
AWS.authorize = function(accessKeyId, secretKey) {
	_sessionOBJ.accessKeyId = accessKeyId;
	_sessionOBJ.secretKey = secretKey;
}

_sessionOBJ.bedFrame.build(AWS, {
	verb : 'POST',
	version : "2011-06-15",
	executor : sessionTokenExecutor,
	endpoint : "https://sts.amazonaws.com",
	preparer : function() {
		if(!this.action) {
			initCap = this.method.substr(0, 1).toUpperCase();
			this.action = initCap + this.method.substr(1);

		}
	},
	children : [{
		property : 'DDB',
		children : [{
			method : 'getSessionToken'
		}, {

			method : 'ListTables',
			executor : dynamoDbExecutor,
			endpoint : 'http://dynamodb.us-east-1.amazonaws.com/'

		}]
	}]
});

module.exports = AWS